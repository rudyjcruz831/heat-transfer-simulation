application.go: 

package app

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/rudyjcruz831/heat-transfer-simulation/models"
	"github.com/rudyjcruz831/heat-transfer-simulation/services"
)

const (
	HeatTransferCoefficient = 0.1
)

func StartApplication() {

	interrupt := make(chan os.Signal, 1)
	signal.Notify(interrupt, os.Interrupt, syscall.SIGTERM)

	go func() {
		<-interrupt
		fmt.Println("Simulation interrupted. Stopping...")
		os.Exit(0)
	}()

	// log.Println("Starting server... ")
	solarPanle := &models.SolarPanel{
		Area:           2.0,
		Efficiency:     0.8,
		Temperature:    0.0,
		Degradation:    1.0,
		DustAccumulate: 0.0,
	}

	storageTank := &models.StorageTank{
		Volume:      100.00,
		Temperature: 25.0,
	}

	pump := &models.Pump{
		FlowRate: 10.0,
	}

	system := &models.System{
		SolarRadiation: 1.0, // Set an initial value for solar radiation
		// AmbientTemperature: 0.0, // Set an initial value for ambient temperature
	}

	solarPaneService := services.NewSolarPanelService(solarPanle)
	storageTankService := services.NewStorageTankService(storageTank)
	pumpService := services.NewPumpService(pump)
	systemService := services.NewSystemService(system, solarPaneService, storageTankService, pumpService)

	fmt.Println("Starting Simulation...")
	// time.Second.Seconds()
	systemService.Simulate(system.SolarRadiation, HeatTransferCoefficient)
}

interface.go: 

package models

// interfaces

// SystemService interface represetns a system simulation of
// Solar System , Pump, and Storage Tank
type SystemService interface {
	CaptureSolarRadiation()
	CaptureDustAccumulation()
	CaptureSolarEnergy(float64, float64)
	UpdateDegradation()
	GetTemperature() float64
	GetEfficiency() float64
	DisplayTemperatures()
	Simulate(float64, float64)
}

// SolarPanelSevice interface represents a stroage tank service
type SolarPanelService interface {
	GetArea() float64
	GetEfficiency() float64
	GetTemperature() float64
	GetDegradation() float64
	GetDustAccumulation() float64
	CaptureSolarRadiation()
	CaptureDustAccumulation()
	CaptureSolarEnergy(solarRadiation float64, heatTransferCoefficient float64)
	UpdateDegradation()
}

// StorageTankService interface represents a stroage tank service
type StorageTankService interface {
	GetTemperature() float64
	GetVolume() float64
	UpdateTemperature(float64)
}

// PumpService interface represents a pump component
type PumpService interface {
	GetFlowRate() float64
	PumpWater()
	MonitorWaterFlow()
}

pump.go: 

package models

// Pump struct
type Pump struct {
	FlowRate float64
}

solar_panel.go:

package models

// SolarPanel struct with all the vriables needed
type SolarPanel struct {
	Area           float64 // area of solar panel
	Efficiency     float64 // efficiency of solar panel
	Temperature    float64 // temperature of solar panel
	Degradation    float64 // degradation facto of solar panel
	DustAccumulate float64 // dust accumulation on solar panel
}

storage_tank.go:

package models

// StorageTank struct
type StorageTank struct {
	Volume      float64
	Temperature float64
}

system.go:

package models

type System struct {
	SolarRadiation float64 // The level of solar radiation in the system
	// AmbientTemperature float64 // The ambient temperature in the system
}

// This struct is used to store and manage the solar radiation and ambient
// temperature data within the solar energy system.
// The SolarRadiation field holds the value of solar radiation,
// which indicates the intensity or power of sunlight available
// for energy conversion. The AmbientTemperature field represents
// the surrounding or environmental temperature in the system.
// These values are important for the operation and performance
// of the solar energy system, as they affect the efficiency
// and output of solar panels and other components.

pump_service.go:

package services

import (
	"fmt"
	"time"

	"github.com/rudyjcruz831/heat-transfer-simulation/models"
)

type pumpService struct {
	pump *models.Pump
}

// Create a NewPumpService is a factory function for
// initializing a PumpService with its repository layer dependencies
func NewPumpService(pump *models.Pump) models.PumpService {
	return &pumpService{
		pump: pump,
	}
}

// Get the flow rate of pump
func (p *pumpService) GetFlowRate() float64 {
	return p.pump.FlowRate
}

func (p *pumpService) PumpWater() {
	// Pump water from the storage tank to the solar panle
	waterFlow := p.pump.FlowRate // Get the desired flow rate from the pump

	// calcualate the volume of water to be pump based on the flow rae
	volume := waterFlow * time.Second.Seconds() // Assuming time.Second is the duration for 1 second

	fmt.Printf("Pumping %.2f liters of water per seocnd...\n", volume)

	fmt.Println("Water pumped successfully")
}

func (p *pumpService) MonitorWaterFlow() {
	fmt.Println("Water flow rate : ", p.pump.FlowRate, "liters per minute")
}


solar_panel_service.go:

package services

import (
	"math/rand"

	"github.com/rudyjcruz831/heat-transfer-simulation/models"
)

// solarPanelService acts as a struct for injecting an implementation of SolarPanel struct
// for use in service methods
type solarPanelService struct {
	solarPanel *models.SolarPanel
}

// Create a NewSolarPanelService is a factory function for
// initializing a SolarPanelService with its repository layer dependencies
func NewSolarPanelService(solarPanel *models.SolarPanel) models.SolarPanelService {
	return &solarPanelService{
		solarPanel: solarPanel,
	}
}

// Get Area for SolarPanel
func (p *solarPanelService) GetArea() float64 {
	return p.solarPanel.Area
}

// Get Efficiency for Solar Panel
func (p *solarPanelService) GetEfficiency() float64 {
	return p.solarPanel.Efficiency
}

// Get Temperatur of Solar Panel
func (p *solarPanelService) GetTemperature() float64 {
	return p.solarPanel.Temperature
}

// Get Degradation for Solar Panel
func (p *solarPanelService) GetDegradation() float64 {
	return p.solarPanel.Degradation
}

// Get Dust accumulation for solar Panel
func (p *solarPanelService) GetDustAccumulation() float64 {
	return p.solarPanel.DustAccumulate
}

func (p *solarPanelService) CaptureSolarRadiation() {
	// simulate dynamic solar radiation (esample: random values between 0.5 and 1.5)
	p.solarPanel.Efficiency = p.solarPanel.Efficiency * (0.5 + rand.Float64())
}

// In this example, rand.Float64() generates a random value
// between 0 and 1, which is then multiplied by 0.1 to
// simulate dust accumulation. You can adjust the
// multiplication factor or the range of random values
// according to your specific requirements.
func (p *solarPanelService) CaptureDustAccumulation() {
	// Simulate dust accumulation on solar panel (example: random values between 0 and 0.1)
	p.solarPanel.DustAccumulate = rand.Float64() * 0.1
}

// CaptureSolarEnergy captures solar energy and increases the solar panel's temperature.
// It calculates the incident solar radiation based on the efficiency, area, and given solar radiation.
// Then, it updates the temperature using the heat transfer coefficient.
func (p *solarPanelService) CaptureSolarEnergy(solarRediation float64, heatTransferCoefficient float64) {
	incidentSolarRadiation := p.GetEfficiency() * p.GetArea() * solarRediation
	p.solarPanel.Temperature += incidentSolarRadiation / (p.GetArea() * heatTransferCoefficient)

}

func (p *solarPanelService) UpdateDegradation() {
	// simulate solar panel degradation over time
	// (example: degradation factor decreses by 0.001 per second)
	p.solarPanel.Degradation -= 0.001
}

storage_tank_service.go:

package services

import "github.com/rudyjcruz831/heat-transfer-simulation/models"

// stroageTankService acts as a struct for injecting an implementation of storageTank struct
// for use in service methods
type storageTankService struct {
	storageTank *models.StorageTank
}

// Create a NewStorageTankSercivice is a factory function for
// initializing a StroagejTankService with its repository layer dependencies
func NewStorageTankService(storageTank *models.StorageTank) models.StorageTankService {
	return &storageTankService{
		storageTank: storageTank,
	}
}

// Get volume of tank
func (t *storageTankService) GetVolume() float64 {
	return t.storageTank.Volume
}

// Get temperature of storage tank
func (t *storageTankService) GetTemperature() float64 {
	return t.storageTank.Temperature
}

// Update temperature of storage tank
func (t *storageTankService) UpdateTemperature(temperature float64) {
	t.storageTank.Temperature = temperature
}


system_service.go:

package services

import (
	"fmt"
	"time"

	"github.com/rudyjcruz831/heat-transfer-simulation/models"
)

// systemService acts as a struct for injecting an implementation of
// SolarPanel, SolarPanelService, StorageTankService struct for use in service methods
type systemService struct {
	system         *models.System
	solarPanelSrv  models.SolarPanelService
	storageTankSrv models.StorageTankService
	pumpSrv        models.PumpService
}

// Create a NewSystemService is a factory function for
// initializing a SystemService with its repository layer dependencies
func NewSystemService(system *models.System,
	solarasolarPanelService models.SolarPanelService,
	storageTankService models.StorageTankService,
	pumpService models.PumpService) models.SystemService {
	return &systemService{
		system:         system,
		solarPanelSrv:  solarasolarPanelService,
		storageTankSrv: storageTankService,
		pumpSrv:        pumpService,
	}
}

// CaptureSolarRadiation captures the solar radiation
// by invoking the corresponding method in the solar panel service.
func (s *systemService) CaptureSolarRadiation() {
	s.solarPanelSrv.CaptureSolarRadiation()
}

// CaptureDustAccumulation captures the dust accumulation on the solar
// panel by invoking the corresponding method in the solar panel service.
func (s *systemService) CaptureDustAccumulation() {
	s.solarPanelSrv.CaptureDustAccumulation()
}

// CaptureSolarEnergy captures the solar energy based on the provided
// solar radiation and heat transfer coefficient.
// It invokes the corresponding method in the solar panel service.
func (s *systemService) CaptureSolarEnergy(solarRadiation float64, heatTransferCoefficient float64) {
	s.solarPanelSrv.CaptureSolarEnergy(solarRadiation, heatTransferCoefficient)
}

// UpdateDegradation updates the degradation of the solar panel by invoking
// the corresponding method in the solar panel service.
func (s *systemService) UpdateDegradation() {
	s.solarPanelSrv.UpdateDegradation()
}

// GetTemperature retrieves the temperature of the storage tank
func (s *systemService) GetTemperature() float64 {
	return s.storageTankSrv.GetTemperature()
}

// GetEfficiency retrieves the efficiency of the solar panel
func (s *systemService) GetEfficiency() float64 {
	return s.solarPanelSrv.GetEfficiency()
}

// Transfer heat from SolarPanel to StorageTank
func (s *systemService) TransferHeat(heatTransferCoefficient float64) {

	// Calculate the amount of heat to transfer based on the temperature difference
	// between the solar panel and the storage tank, the area of the solar panel,
	// and the heat transfer coefficient
	heatTranfer := heatTransferCoefficient * s.solarPanelSrv.GetArea() * (s.solarPanelSrv.GetTemperature() - s.storageTankSrv.GetTemperature())

	// Update the temperature of the storage tank by adding the transferred heat
	// divided by the volume of the storage tank and a specific heat capacity constant (4.18)
	s.storageTankSrv.UpdateTemperature(s.storageTankSrv.GetTemperature() + heatTranfer/(s.storageTankSrv.GetVolume()*4.18))
}

func (s *systemService) MonitorWaterFlow() {
	s.pumpSrv.MonitorWaterFlow()
}

// DisplayTemperatures prints the temperatures and other relevant data to the console
func (s *systemService) DisplayTemperatures() {
	fmt.Printf("Solar Panel Temperature: %.2f°C\n", s.solarPanelSrv.GetTemperature())
	fmt.Printf("Storage Tank Temperature: %.2f°C\n", s.storageTankSrv.GetTemperature())
	fmt.Printf("Solar Radiation: %.2f\n", s.system.SolarRadiation)
	fmt.Printf("Solar Panel Efficiency: %.2f\n", s.GetEfficiency())
	fmt.Printf("Solar Panel Degradation: %.3f\n", s.solarPanelSrv.GetDegradation())
	fmt.Println("----------------------------------------")
}

func (s *systemService) Simulate(solarRadiation float64, heatTransferCoefficient float64) {
	for {
		s.CaptureSolarRadiation()
		// s.CaptureAmbientTemperature()
		s.CaptureDustAccumulation()
		s.CaptureSolarEnergy(solarRadiation, heatTransferCoefficient)
		s.TransferHeat(heatTransferCoefficient)
		s.UpdateDegradation()
		s.MonitorWaterFlow()
		s.DisplayTemperatures()

		time.Sleep(time.Second)
	}
}


main.go: 

package main

import "github.com/rudyjcruz831/heat-transfer-simulation/app"

func main() {
	app.StartApplication()
}
